name: Get latest toolbox-server

on:
  push:
    tags:
    - v*
    
jobs:
  get-latest-toolbox-server:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: |
          mkdir -p $HOME/bin
          Invoke-WebRequest -Uri "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe" -OutFile "$HOME/bin/jq.exe"

      - name: Get latest release
        id: get-release
        run: |
          $url = "https://api.github.com/repos/ge-fei-fan/toolbox-server/releases/latest"
          $response = Invoke-WebRequest -Uri $url | ConvertFrom-Json
          $tag_name = $response.tag_name
          $asset_url = $response.assets | Where-Object { $_.name -like "*.exe" } | Select-Object -ExpandProperty browser_download_url
          echo "::set-output name=tag_name::$tag_name"
          echo "::set-output name=asset_url::$asset_url"

      - name: Download latest release
        run: |
          $asset_url = "${{ steps.get-release.outputs.asset_url }}"
          Invoke-WebRequest -Uri $asset_url -OutFile "toolbox-server.exe"
      - name: Download latest release
        run: |
          $asset_url = "${{ steps.get-release.outputs.asset_url }}"
          Invoke-WebRequest -Uri $asset_url -OutFile "toolbox-server.exe"

      - name: Move toolbox-server.exe to engine directory
        run: |
          # move  "toolbox-server.exe" "engine/"
          xcopy /Y toolbox-server.exe engine\

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install

      - name: Build for Windows
        run: yarn build-win
        
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash
        
      # 从该tag打上一个release标签(这里会output一些参数 后面才能使用)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Assets
        id: upload_assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release
          asset_name: '.*'
